#! ------------------------
#!! GENERAL CONFIGURATION
#!! -------------------------

[General]
#Set to True or False to display debug messages
Debug: True

dataset = 2017

btagidx0 = <!General|hJidx!>[0]
btagidx1 = <!General|hJidx!>[1]

electronMVA80 = Electron_mvaFall17V1Iso_WP80
electronMVA90 = Electron_mvaFall17V1Iso_WP90
electronMVA = <!General|electronMVA90!>

;_*_*_*_*_*_*_*_*_*
#  REG/KINFIT     |
;_*_*_*_*_*_*_*_*_*

Htype = REG
#Htype = KINFIT


;H tag
Hbtag = H

[Configuration]
usePythonXrootD = True
outputTreeBasketSize = 8000
haddTargetNumEvents = 16000

# NanoAOD format
treeName = Events
countTreeName = genEventSumw
AllowDuplicateTrees = True
countsFromAutoPU = False

[Analysis]
tag = 13TeV

# flags below are NOT USED ANYMORE!!
# TODO: remove

# BDT to discriminate Signal and Background
#!! If this Flag is used then 50% of MC samples will go in training and the rest will be scaled up by a factor of 2.
#!! if you train on 50% but then set it to 'False' while writing DC, then you get your biased training samples in the limit!!!
#!! be sure to have this right !!!
;#When computing SF from CR, set this flag to false
;if one wants to use Mjj -> put to False
;Rescale MC by factor 2 if true
TrainFlag = True
;TrainFlag = False
;Current BDT FOM: Cls of train/vs CLs of test sample. To produce the DC on train sample, set this flag to True.
;!!!IMPORTANT: BE SURE TO HAVE "UseTrainSample = False" WHEN COMPUTING THE FINAL LIMIT !!!
UseTrainSample = False
;UseTrainSample = True
;ALWAYS set to False, unless training to produce correlation plots
Data_as_signal = False


[Prep]
VHbb = ['Prep.Clean', 'Prep.Selection', 'VHbbCommon.isData', 'VHbbCommon.isSignal','VHbbCommon.isWH','VHbbCommon.isZH','VHbbCommon.HeppyStyleGen','VHbbCommon.genBstatus','VHbbCommon.SampleGroup']
Clean = Drop.Drop(dropBranches=['HLT_*','TrigObj_*','nTrigObj','SubJet_*','nSubJet','Photon_*','nPhoton','Tau_*','nTau','nGenVisTau','GenVisTau_*','FatJet_*','nFatJet'],keepBranches=['HLT_Ele23_Ele12_CaloIdL_TrackIdL_Iso*','HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass*','HLT_PFMET120_PFMHT120_IDTight','HLT_PFMET120_PFMHT120_IDTight_PFHT60','HLT_Ele32_WPTight_Gsf_L1DoubleEG','HLT_IsoMu27'])
Selection = VHbbSelection.VHbbSelection(year="2017", channels=["Zll"], fixStupidRenamingDoneInV11=True)

;;;;
;FOR SYS
;;;;
[Sys]
useTreeFriends = False

all = ['Sys.DropFatJet','Sys.DropTau','Sys.DropPhoton','Sys.DropSubJet','Sys.DropTrigObj','Sys.DropUnusedHLT','VHbbCommon.BTagSFDeepCSV','Sys.electronSF','Sys.muonSF','Sys.Run2017BmuHLT','VHbbCommon.HiggsReco','VHbbCommon.vLeptons','VHbbCommon.EWKweights','VHbbCommon.DYspecialWeight', 'VHbbCommon.FitCorr', 'VHbbCommon.LOtoNLOweight']

# weights
muonSF = MuonSFfromJSON.MuonSFfromJSON(jsonFiles=['data/Zll/Muons/RunBCDEF_SF_ID.json','data/Zll/Muons/RunBCDEF_SF_ISO.json'], channel='Zll')
electronSF = ElectronSFfromJSON.ElectronSFfromJSON(jsonFiles=['data/Zll/Electrons/VHbb2ElectronIDISO2017.json','data/Zll/Electrons/VHbb2ElectronTriggerLeg12017.json','data/Zll/Electrons/VHbb2ElectronTriggerLeg22017.json','data/Wlv/Electrons/ScaleFactor_etracker_80x.json'], branchName='electronSF', channel='Zll')

# PU weight is now already present!
#PUweight = PUweight.PUweight(fileNameData='data/pu/2017/PU_Cert_294927-306462_13TeV_PromptReco_Collisions17_JSON.root',fileNameMC=None,fileNameDataUp='data/pu/2017/PU_Cert_294927-306462_13TeV_PromptReco_Collisions17_JSON_Up.root',fileNameDataDown='data/pu/2017/PU_Cert_294927-306462_13TeV_PromptReco_Collisions17_JSON_Down.root',puWeightName='puWeightAuto')
GetDoubleMuTriggWeight = GetDoubleMuTriggWeight.GetDoubleMuTriggWeight()
aJidx = aJidx.aJidx()

# clean-up
DropFatJet = Drop.Drop(dropBranches=['FatJet_*','nFatJet'])
DropTau = Drop.Drop(dropBranches=['Tau_*','nTau','nGenVisTau','GenVisTau_*'])
DropPhoton = Drop.Drop(dropBranches=['Photon_*','nPhoton'])
DropSubJet = Drop.Drop(dropBranches=['SubJet_*','nSubJet'])
DropTrigObj = Drop.Drop(dropBranches=['TrigObj_*','nTrigObj'])
DropMETsys = Drop.Drop(dropBranches=['MET_pt_j*','MET_phi_j*'])
DropUnusedHLT = Drop.Drop(dropBranches=['HLT_*'],keepBranches=['HLT_Ele23_Ele12_CaloIdL_TrackIdL_Iso*','HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass*'])
Run2017BmuHLT = BranchTools.DefaultIfNotExisting(branchName='HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass3p8',branchType='O',defaultValue=0)
Selection2017V2JERfix = Selection2017V2JERfix.Selection2017V2JERfix()

# kinematic fit
# needs special CMSSW version!!!
kinFitter = kinFitter.kinFitter()
Dropkinfit = Drop.Drop(dropBranches=['*fit*','kinfit*'])

; special sequences for JER un-smearing fix
; instead of 'prep' run sys with --addCollection Sys.prepJERfix
#prepJERfix = ['Sys.DropMETsys','Sys.DropFatJet','Sys.DropTau','Sys.DropPhoton','Sys.DropSubJet','Sys.DropTrigObj','Sys.Selection2017V2JERfix','Sys.Run2017BmuHLT','Sys.vLeptons','Sys.isData']
#sysJERfix = ['Sys.electronSF','Sys.muonSF','Sys.HiggsCandidateSystematics', 'Sys.PUweight','Sys.BTagWeightsJERfix']
; to add double mu SF

#testing new electronsF (vectors and split in eta)
eSF_test= ['Sys.electronSF']

# sampleIndex and region flag
regions = BranchTools.TreeFormulas({
    'isSR': '(kinFit.V_mass_fit > 75 && kinFit.V_mass_fit < 105 && (kinFit.H_mass_fit_fallback > 90 && kinFit.H_mass_fit_fallback < 150) && Jet_btagDeepB[hJidx[0]] > 0.1522 && Jet_btagDeepB[hJidx[1]] > 0.1522 && ((isZee||isZmm)&&(Jet_PtReg[hJidx[0]]>20&&Jet_PtReg[hJidx[1]]>20)&&(kinFit.kinfit_fit == 1))) && (kinFit.V_pt_fit > 50)', 
    'isTTCR': '(kinFit.V_mass_fit > 10 & (kinFit.V_mass_fit < 75 || kinFit.V_mass_fit > 120) & Jet_btagDeepB[hJidx[0]] > 0.8001 & Jet_btagDeepB[hJidx[1]] > 0.1522  & ((isZee||isZmm)&&(Jet_PtReg[hJidx[0]]>20&&Jet_PtReg[hJidx[1]]>20)&&(kinFit.kinfit_fit == 1))) && (kinFit.V_pt_fit > 50)',
    'isLFCR': '((kinFit.V_mass_fit>75. && kinFit.V_mass_fit<105. && Jet_btagDeepB[hJidx[0]] < 0.1522 && Jet_btagDeepB[hJidx[1]] < 0.1522 && abs(TVector2::Phi_mpi_pi(kinFit.H_phi_fit-kinFit.V_phi_fit)) > 2.5 && ((isZee||isZmm)&&(Jet_PtReg[hJidx[0]]>20&&Jet_PtReg[hJidx[1]]>20)&&(kinFit.kinfit_fit == 1))) && kinFit.V_pt_fit > 50) && (kinFit.H_mass_fit_fallback > 90 && kinFit.H_mass_fit_fallback < 150) && (kinFit.V_pt_fit > 50)',
    'isHFCR': '(abs(TVector2::Phi_mpi_pi(kinFit.H_phi_fit-kinFit.V_phi_fit)) > 2.5 && kinFit.V_mass_fit > 85. && kinFit.V_mass_fit < 97. && MET_Pt < 60 && (kinFit.H_mass_fit_fallback < 90 || kinFit.H_mass_fit_fallback > 150) && Jet_btagDeepB[hJidx[0]] > 0.8001 && Jet_btagDeepB[hJidx[1]] > 0.1522 && ((isZee||isZmm)&&(Jet_PtReg[hJidx[0]]>20&&Jet_PtReg[hJidx[1]]>20)&&(kinFit.kinfit_fit == 1)) && kinFit.V_pt_fit>50) && (kinFit.V_pt_fit > 50)' 
    })
SampleGroup = SampleGroup.SampleGroup()

HH4Bres = BranchTools.TreeFormulas({
    'hj1_pt_hh4bres': '(abs(Jet_eta[hJidx[0]]) < 1.4) * ( 22.26 - 0.01 * max(40.0, min(550.0, Jet_Pt[hJidx[0]])) + 0.00018 * max(40.0, min(550.0, Jet_Pt[hJidx[0]]))**2 ) + (abs(Jet_eta[hJidx[0]]) >= 1.4) * ( 17.11 + 0.058 * max(40.0, min(350.0, Jet_Pt[hJidx[0]])))',
    'hj2_pt_hh4bres': '(abs(Jet_eta[hJidx[1]]) < 1.4) * ( 22.26 - 0.01 * max(40.0, min(550.0, Jet_Pt[hJidx[1]])) + 0.00018 * max(40.0, min(550.0, Jet_Pt[hJidx[1]]))**2 ) + (abs(Jet_eta[hJidx[1]]) >= 1.4) * ( 17.11 + 0.058 * max(40.0, min(350.0, Jet_Pt[hJidx[1]])))',
    'hj1_eta_hh4bres': '0.033 + (4.1 / max(40.0, min(500.0, Jet_Pt[hJidx[0]]))) + (-0.17 / (max(40.0, min(500.0, Jet_Pt[hJidx[0]]))**0.5))',
    'hj2_eta_hh4bres': '0.033 + (4.1 / max(40.0, min(500.0, Jet_Pt[hJidx[1]]))) + (-0.17 / (max(40.0, min(500.0, Jet_Pt[hJidx[1]]))**0.5))',
    'hj1_phi_hh4bres': '0.038 + (4.1 / max(40.0, min(500.0, Jet_Pt[hJidx[0]]))) + (-0.19 / (max(40.0, min(500.0, Jet_Pt[hJidx[0]]))**0.5))',
    'hj2_phi_hh4bres': '0.038 + (4.1 / max(40.0, min(500.0, Jet_Pt[hJidx[1]]))) + (-0.19 / (max(40.0, min(500.0, Jet_Pt[hJidx[1]]))**0.5))'
    })

[Eval]
weightAsBranch = WeightAsBranch.WeightAsBranch()
all = ['Eval.lowPt','Eval.highPt','Eval.weightAsBranch']
VVDNN = ['Eval.VVDNNlow', 'Eval.VVDNNhigh']

# DNNs
lowPt = tensorflowEvaluator.tensorflowEvaluator(mvaName='ZllBDT_lowpt')
highPt = tensorflowEvaluator.tensorflowEvaluator(mvaName='ZllBDT_highpt')

massless_highpt = tensorflowEvaluator.tensorflowEvaluator(mvaName='ZllBDT_highpt', version=2)

massless = ['Eval.lowPtMassless', 'Eval.highPtMassless']
lowPtMassless = tensorflowEvaluator.tensorflowEvaluator(mvaName='ZllBDT_lowpt_massless')
highPtMassless = tensorflowEvaluator.tensorflowEvaluator(mvaName='ZllBDT_highpt_massless')

lowPtMulti = tensorflowEvaluator.tensorflowEvaluator(mvaName='ZllBDT_lowpt_multi', version=2)
highPtMulti = tensorflowEvaluator.tensorflowEvaluator(mvaName='ZllBDT_highpt_multi', version=2)
multi = ['Eval.lowPtMulti', 'Eval.highPtMulti']

CRDNN = ['Eval.CRDNNlow', 'Eval.CRDNNhigh']
CRDNNlow = tensorflowEvaluator.tensorflowEvaluator(mvaName='ZllBDT_lowpt_HFCR', version=2)
CRDNNhigh = tensorflowEvaluator.tensorflowEvaluator(mvaName='ZllBDT_highpt_HFCR', version=2)

# VV
VVDNNlow  = tensorflowEvaluator.tensorflowEvaluator(mvaName='ZllBDT_lowpt_VV')
VVDNNhigh = tensorflowEvaluator.tensorflowEvaluator(mvaName='ZllBDT_highpt_VV')


#ZllBDT_highpt_multi

#Need this for the plotting
[VHbbNameSpace]
library=<!Directories|vhbbpath!>/interface/VHbbNameSpace_h.so

;!! --------------------------
;!! SYSTEMATICS (shape)
;!! --------------------------
[systematics]

systematics = Nominal jer_Up jer_Down jerReg_Up jerReg_Down jesAbsoluteStat_Up jesAbsoluteStat_Down jesAbsoluteScale_Up jesAbsoluteScale_Down jesAbsoluteFlavMap_Up jesAbsoluteFlavMap_Down jesAbsoluteMPFBias_Up jesAbsoluteMPFBias_Down jesFragmentation_Up jesFragmentation_Down jesSinglePionECAL_Up jesSinglePionECAL_Down jesSinglePionHCAL_Up jesSinglePionHCAL_Down jesFlavorQCD_Up jesFlavorQCD_Down jesRelativeJEREC1_Up jesRelativeJEREC1_Down jesRelativeJEREC2_Up jesRelativeJEREC2_Down jesRelativeJERHF_Up jesRelativeJERHF_Down jesRelativePtBB_Up jesRelativePtBB_Down jesRelativePtEC1_Up jesRelativePtEC1_Down jesRelativePtEC2_Up jesRelativePtEC2_Down jesRelativePtHF_Up jesRelativePtHF_Down jesRelativeBal_Up jesRelativeBal_Down jesRelativeFSR_Up jesRelativeFSR_Down jesRelativeStatFSR_Up jesRelativeStatFSR_Down jesRelativeStatEC_Up jesRelativeStatEC_Down jesRelativeStatHF_Up jesRelativeStatHF_Down jesPileUpDataMC_Up jesPileUpDataMC_Down jesPileUpPtRef_Up jesPileUpPtRef_Down jesPileUpPtBB_Up jesPileUpPtBB_Down jesPileUpPtEC1_Up jesPileUpPtEC1_Down jesPileUpPtEC2_Up jesPileUpPtEC2_Down jesPileUpPtHF_Up jesPileUpPtHF_Down jesPileUpMuZero_Up jesPileUpMuZero_Down jesPileUpEnvelope_Up jesPileUpEnvelope_Down jesTotal_Up jesTotal_Down

[Weights]

;_*_*_*_
;Nominal
;_*_*_*_

#muTrigWeight     = ((Vtype==1&&HLT_Ele23_Ele12_CaloIdL_TrackIdL_IsoVL_DZ) + (Vtype==0)*(4.767/41.298*HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass8 + 36.531/41.298*HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass3p8))
muTrigWeight     = 1.0
# double muon scale factors broken in 2017
#muonWeight       = muonSF_Iso[0]*muonSF_Id[0]*DoubleMu[0]
muonWeight       = muonSF_Iso[0]*muonSF_Id[0]
electronWeight   = electronSF_IdIso[0]*electronSF_trigger[0]
leptonWeight     = <!Weights|muonWeight!>*<!Weights|electronWeight!>
bTagWeight       = bTagWeightDeepCSV
puWeight         = puWeight
genWeight        = genWeight
weightNLO        = weightLOtoNLO
ewkWeight        = EWKw[0]
; top pt reweighting
FitCorr          = FitCorr[0]

; use the per sample defined special weight from config
;When True, uses special weight from samples_nosplit.ini
useSpecialWeight        = True
;useSpecialWeight        = False

stitchingWeights_False  = DY_specialWeight 
stitchingWeights_True   = 1.0
stitchingWeights        = <!Weights|stitchingWeights_<!.|useSpecialWeight!>!>

weightF = <!Weights|genWeight!>*<!Weights|puWeight!>*<!Weights|stitchingWeights!>*<!Weights|leptonWeight!>*<!Weights|bTagWeight!>*<!Weights|ewkWeight!>*<!Weights|weightNLO!>*<!Weights|FitCorr!>

weight_noPU: <!Weights|genWeight!>*<!Weights|leptonWeight!>*<!Weights|stitchingWeights!>*<!Weights|bTagWeight!>*<!Weights|ewkWeight!>*<!Weights|weightNLO!>*<!Weights|FitCorr!>
weight_noLepSF: <!Weights|genWeight!>*<!Weights|puWeight!>*<!Weights|stitchingWeights!>*<!Weights|bTagWeight!>*<!Weights|ewkWeight!>*<!Weights|weightNLO!>*<!Weights|FitCorr!>
weight_noEWK:  <!Weights|genWeight!>*<!Weights|puWeight!>*<!Weights|leptonWeight!>*<!Weights|stitchingWeights!>*<!Weights|bTagWeight!>*<!Weights|weightNLO!>*<!Weights|FitCorr!>
weight_noNLO: <!Weights|genWeight!>*<!Weights|puWeight!>*<!Weights|leptonWeight!>*<!Weights|stitchingWeights!>*<!Weights|bTagWeight!>*<!Weights|ewkWeight!>*<!Weights|FitCorr!>
weight_noBTag: <!Weights|genWeight!>*<!Weights|puWeight!>*<!Weights|leptonWeight!>*<!Weights|stitchingWeights!>*<!Weights|ewkWeight!>*<!Weights|weightNLO!>*<!Weights|FitCorr!>
weight_noFitCorr: <!Weights|genWeight!>*<!Weights|puWeight!>*<!Weights|stitchingWeights!>*<!Weights|leptonWeight!>*<!Weights|bTagWeight!>*<!Weights|ewkWeight!>*<!Weights|weightNLO!> 


#----- Electrons -----#
CMS_vhbb_eff_e_trigger_Zll_13TeV_DOWN:    <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso[0]*electronSF_trigger[1]
CMS_vhbb_eff_e_MVAID_Zll_13TeV_DOWN:      <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso[1]*electronSF_trigger[0]
CMS_vhbb_eff_e_MVAID_Zll_eta0_13TeV_DOWN: <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso_B[0]*electronSF_trigger[0]
CMS_vhbb_eff_e_MVAID_Zll_eta1_13TeV_DOWN: <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso_E[0]*electronSF_trigger[0]

CMS_vhbb_eff_e_trigger_Zll_13TeV_UP:    <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso[0]*electronSF_trigger[2]
CMS_vhbb_eff_e_MVAID_Zll_13TeV_UP:      <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso[2]*electronSF_trigger[0]
CMS_vhbb_eff_e_MVAID_Zll_eta0_13TeV_UP: <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso_B[1]*electronSF_trigger[0]
CMS_vhbb_eff_e_MVAID_Zll_eta1_13TeV_UP: <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso_E[1]*electronSF_trigger[0]

#----- Muons -----#
CMS_vhbb_eff_m_trigger_Zll_13TeV_DOWN: <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[0]
CMS_vhbb_eff_m_ISO_Zll_13TeV_DOWN:     <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[1]*muonSF_Id[0]
CMS_vhbb_eff_m_MVAID_Zll_13TeV_DOWN:   <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[1]
CMS_vhbb_eff_m_tracker_Zll_13TeV_DOWN: <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[0]

CMS_vhbb_eff_m_trigger_Zll_13TeV_UP: <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[0]
CMS_vhbb_eff_m_ISO_Zll_13TeV_UP:     <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[2]*muonSF_Id[0]
CMS_vhbb_eff_m_MVAID_Zll_13TeV_UP:   <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[2]
CMS_vhbb_eff_m_tracker_Zll_13TeV_UP: <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[0]


[Branches]
;branch that should always be kept in the Nutples
keep_branches = ['is*', 'run', 'event', 'luminosityBlock', 'sampleIndex', 'genWeight', 'puWeight', 'V_*','EWKwVJets', 'LHE_Njets', 'LHE_HT', 'LHE_Nb', 'LHE_Vpt', 'LHE_Nuds', 'LHE_Nc', 'Vtype', 'vLidx', 'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass*', 'HLT_Ele23_Ele12_CaloIdL_TrackIdL_Iso*', 'GenJet_pt', 'GenJet_eta', 'GenJet_hadronFlavour', 'genWeight','electronSF','muonSF','bTagWeightDeepCSV*','Pileup_nTrueInt', 'fixedGridRhoFastjetAll','*BDT*','puWeightDown','puWeightUp','btagWeight_DeepCSVB','nGenStatus2bHad','GenPart*','DY_specialWeight','weightLO*','nFSRrecovered','Jet_lepFilter','weight*']

keep_branches_plot = []

